{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA-CATALOG'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\nSQL                       = String.raw\nE                         = require './errors'\n{ Dba, }                  = require 'icql-dba'\nguy                       = require 'guy'\n\n\n\n#===========================================================================================================\ntypes.declare 'dba', tests:\n  \"@isa.object x\":                    ( x ) -> @isa.object x\ntypes.declare 'constructor_cfg', tests:\n  \"@isa.object x\":                    ( x ) -> @isa.object x\n  \"@isa.dba x.dba\":                   ( x ) -> @isa.dba x.dba\n  \"@isa.nonempty_text x.prefix\":      ( x ) -> @isa.nonempty_text x.prefix\n\n#===========================================================================================================\nclass @Dcat\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: guy.lft.freeze\n    function_flags:\n      is_deterministic:   0x000000800 # SQLITE_DETERMINISTIC\n      is_directonly:      0x000080000 # SQLITE_DIRECTONLY\n      is_subtype:         0x000100000 # SQLITE_SUBTYPE\n      is_innocuous:       0x000200000 # SQLITE_INNOCUOUS\n    defaults:\n      constructor_cfg:\n        dba:        null\n        prefix:     'dcat_'\n\n  #---------------------------------------------------------------------------------------------------------\n  @declare_types: ( self ) ->\n    self.types.validate.constructor_cfg self.cfg\n    guy.props.def self, 'dba', { enumerable: false, value: self.cfg.dba, }\n    self.cfg = guy.lft.lets self.cfg, ( d ) -> delete d.dba\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    #.......................................................................................................\n    guy.cfg.configure_with_types @, cfg, types\n    @_compile_sql()\n    @_create_sql_functions()\n    @_create_db_structure()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_db_structure: ->\n    prefix = @cfg.prefix\n    #-------------------------------------------------------------------------------------------------------\n    # OPTIONS\n    #.......................................................................................................\n    @dba.execute SQL\"\"\"\n      create view #{prefix}compile_time_options as with r1 as ( select\n          counter.value                             as idx,\n          sqlite_compileoption_get( counter.value ) as facet_txt\n        from std_generate_series( 0, 1e3 ) as counter\n      where facet_txt is not null )\n      select\n          idx                                 as idx,\n          prefix                              as key,\n          suffix                              as value,\n          sqlite_compileoption_used( prefix ) as used\n        from r1,\n        std_str_split_first( r1.facet_txt, '=' ) as r2\n        order by 1;\"\"\"\n    #-------------------------------------------------------------------------------------------------------\n    # FUNCTIONS\n    #.......................................................................................................\n    @dba.execute SQL\"\"\"\n      create view #{prefix}functions as select\n          f.name                                    as fun_name,\n          f.builtin                                 as is_builtin,\n          f.type                                    as type,\n          -- f.enc                                     as enc,\n          f.narg                                    as narg,\n          f.flags                                   as flags,\n          -- xxx_fun_flags_as_text( f.flags )          as tags,\n          #{prefix}fun_is_deterministic( f.flags )  as is_deterministic,\n          #{prefix}fun_is_innocuous( f.flags )      as is_innocuous,\n          #{prefix}fun_is_directonly( f.flags )     as is_directonly\n        from pragma_function_list as f\n        order by name;\"\"\"\n    #-------------------------------------------------------------------------------------------------------\n    # SUNDRY\n    #.......................................................................................................\n    @dba.execute SQL\"create view #{prefix}pragmas      as\n      select * from pragma_pragma_list()      order by name;\"\n    @dba.execute SQL\"\"\"create view #{prefix}modules    as\n      select * from pragma_module_list()      order by name;\"\"\"\n    @dba.execute SQL\"\"\"create view #{prefix}databases  as\n      select * from pragma_database_list()    order by name;\"\"\"\n    @dba.execute SQL\"\"\"create view #{prefix}collations as\n      select * from pragma_collation_list()   order by name;\"\"\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    prefix  = @cfg.prefix\n    sql     = {}\n    guy.props.def @, 'sql', { enumerable: false, value: sql, }\n    ### TAINT may want to cache, although cache key is about as expensive as producing the value itself ###\n    guy.props.def sql, 'reltrigs', { get: => @_get_union_of_sqlite_schema_selects(), }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    @dba.create_stdlib()\n    prefix = @cfg.prefix\n    #.........................................................................................................\n    @dba.create_function\n      name:           prefix + 'fun_flags_as_text'\n      deterministic:  true\n      varargs:        false\n      call:           ( flags_int ) ->\n        R = []\n        for k, v of C.function_flags\n          R.push \"+#{k}\" if ( flags_int & v ) != 0\n        # R.push '+usaf' unless '+inoc' in R\n        return R.join ''\n    #.........................................................................................................\n    for property, bit_pattern of C.function_flags then do ( property, bit_pattern ) =>\n      @dba.create_function\n        name:           prefix + 'fun_' + property\n        deterministic:  true\n        varargs:        false\n        call:           ( flags_int ) -> if ( flags_int & bit_pattern ) != 0 then 1 else 0\n    #.........................................................................................................\n    @dba.create_table_function\n      name:           prefix + 'reltrigs'\n      columns:        [ 'schema', 'type', 'name', 'tbl_name', 'rootpage', ]\n      parameters:     []\n      varargs:        false\n      deterministic:  false\n      rows:           ( -> yield from @dba.query @sql.reltrigs ).bind @\n    #.........................................................................................................\n    return null\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  walk_schemas: -> yield row.schema for row from @dba.query SQL\"select name as schema from dcat_databases;\"\n  # _walk_schemas_i: -> yield @dba.sql.I row.name for row from @dba.query SQL\"select name from dcat_databases;\"\n  _walk_sqlite_schema_selects: ->\n    for schema from @walk_schemas()\n      yield SQL\"\"\"\n        select\n            #{@dba.sql.L schema} as schema,\n            type,\n            name,\n            tbl_name,\n            rootpage\n          from #{@dba.sql.I schema}.sqlite_schema\"\"\"\n    return null\n  _get_union_of_sqlite_schema_selects: ->\n    return ( s for s from @_walk_sqlite_schema_selects() ).join \"\\nunion all\\n\"\n\n\n#===========================================================================================================\nC = @Dcat.C\n\n\n\n\n\n\n\n"
  ]
}