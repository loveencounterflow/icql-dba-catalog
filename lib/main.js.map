{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,OADF,EAEE,QAFF,EAGE,gBAHF,CAAA,GAG4B,KAAK,CAAC,MAAN,CAAA,CAH5B,EAhBA;;;EAqBA,GAAA,GAA4B,MAAM,CAAC;;EACnC,CAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,CAAA,CAAE,GAAF,CAAA,GAA4B,OAAA,CAAQ,UAAR,CAA5B;;EACA,GAAA,GAA4B,OAAA,CAAQ,KAAR,EAxB5B;;;EA6BA,KAAK,CAAC,OAAN,CAAc,KAAd,EAAqB;IAAA,KAAA,EACnB;MAAA,eAAA,EAAoC,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT;IAApC;EADmB,CAArB;;EAEA,KAAK,CAAC,OAAN,CAAc,iBAAd,EAAiC;IAAA,KAAA,EAC/B;MAAA,eAAA,EAAoC,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAApC;MACA,gBAAA,EAAoC,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,GAAL,CAAS,CAAC,CAAC,GAAX;MAAT,CADpC;MAEA,6BAAA,EAAoC,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,aAAL,CAAmB,CAAC,CAAC,MAArB;MAAT;IAFpC;EAD+B,CAAjC,EA/BA;;;EAqCM,IAAC,CAAA;IAAP,MAAA,KAAA,CAAA;;MAUkB,OAAf,aAAe,CAAE,IAAF,CAAA;QACd,KAAA,CAAM,YAAN,EAAoB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAjC,EAAyC,MAAM,CAAC,QAAP,CAAgB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAA7B,CAAzC;QACA,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,eAApB,CAAoC,IAAI,CAAC,GAAzC;QACA,GAAG,CAAC,KAAK,CAAC,GAAV,CAAc,IAAd,EAAoB,KAApB,EAA2B;UAAE,UAAA,EAAY,KAAd;UAAqB,KAAA,EAAO,IAAI,CAAC,GAAG,CAAC;QAArC,CAA3B;QACA,IAAI,CAAC,GAAL,GAAW,GAAG,CAAC,GAAG,CAAC,IAAR,CAAa,IAAI,CAAC,GAAlB,EAAuB,QAAA,CAAE,CAAF,CAAA;iBAAS,OAAO,CAAC,CAAC;QAAlB,CAAvB;AACX,eAAO;MALO,CARlB;;;MAgBE,WAAa,CAAE,GAAF,CAAA,EAAA;;QAEX,KAAA,CAAM,YAAN,EAAoB,GAAG,CAAC,GAAG,CAAC,MAA5B,EAAoC,MAAM,CAAC,QAAP,CAAgB,GAAG,CAAC,GAAG,CAAC,MAAxB,CAApC;QACA,GAAG,CAAC,GAAG,CAAC,oBAAR,CAA6B,IAA7B,EAAgC,GAAhC,EAAqC,KAArC;QACA,IAAC,CAAA,YAAD,CAAA;QACA,IAAC,CAAA,qBAAD,CAAA;QACA,IAAC,CAAA,oBAAD,CAAA;AACA,eAAO;MAPI,CAhBf;;;MA0BE,oBAAsB,CAAA,CAAA;AACxB,YAAA;QAAI,MAAA,GAAS,IAAC,CAAA,GAAG,CAAC;QACd,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,GAAG,CAAA,YAAA,CAAA,CACA,MADA,CAAA;;;;;;;;;;;;aAAA,CAAhB;AAcA,eAAO;MAhBa,CA1BxB;;;MA6CE,YAAc,CAAA,CAAA;AAChB,YAAA;QAAI,MAAA,GAAS,IAAC,CAAA,GAAG,CAAC,OAAlB;;;;;AAKI,eAAO;MANK,CA7ChB;;;MAsDE,qBAAuB,CAAA,CAAA;QACrB,IAAC,CAAA,GAAG,CAAC,aAAL,CAAA,EAAJ;;;;;;;;;AASI,eAAO;MAVc;;IAxDzB;;;IAGE,IAAC,CAAA,CAAD,GACE;MAAA,QAAA,EACE;QAAA,eAAA,EACE;UAAA,GAAA,EAAY,IAAZ;UACA,MAAA,EAAY;QADZ;MADF;IADF;;;;gBAzCJ;;;;;;;;;;;;;;;EAuHA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,IAAlC;;;EAvHA;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA-CATALOG'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\nSQL                       = String.raw\nE                         = require './errors'\n{ Dba, }                  = require 'icql-dba'\nguy                       = require 'guy'\n\n\n\n#===========================================================================================================\ntypes.declare 'dba', tests:\n  \"@isa.object x\":                    ( x ) -> @isa.object x\ntypes.declare 'constructor_cfg', tests:\n  \"@isa.object x\":                    ( x ) -> @isa.object x\n  \"@isa.dba x.dba\":                   ( x ) -> @isa.dba x.dba\n  \"@isa.nonempty_text x.prefix\":      ( x ) -> @isa.nonempty_text x.prefix\n\n#===========================================================================================================\nclass @Dcat\n\n  #---------------------------------------------------------------------------------------------------------\n  @C:\n    defaults:\n      constructor_cfg:\n        dba:        null\n        prefix:     'dcat_'\n\n  #---------------------------------------------------------------------------------------------------------\n  @declare_types: ( self ) ->\n    debug '^473400-1^', self.cfg.dba._state, Object.isFrozen self.cfg.dba._state\n    self.types.validate.constructor_cfg self.cfg\n    guy.props.def self, 'dba', { enumerable: false, value: self.cfg.dba, }\n    self.cfg = guy.lft.lets self.cfg, ( d ) -> delete d.dba\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    #.......................................................................................................\n    debug '^473400-2^', cfg.dba._state, Object.isFrozen cfg.dba._state\n    guy.cfg.configure_with_types @, cfg, types\n    @_compile_sql()\n    @_create_sql_functions()\n    @_create_db_structure()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_db_structure: ->\n    prefix = @cfg.prefix\n    @dba.execute SQL\"\"\"\n      create view #{prefix}compile_time_options as with r1 as ( select\n          counter.value                             as idx,\n          sqlite_compileoption_get( counter.value ) as facet_txt\n        from std_generate_series( 0, 1e3 ) as counter\n      where facet_txt is not null )\n      select\n          idx                                 as idx,\n          prefix                              as key,\n          suffix                              as value,\n          sqlite_compileoption_used( prefix ) as used\n        from r1,\n        std_str_split_first( r1.facet_txt, '=' ) as r2\n        order by 1;\"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    prefix = @cfg.prefix\n    # @query \"select * from sqlite_schema order by type desc, name;\"\n    # sql =\n    #   f: SQL\"\"\n    # guy.props.def @, 'sql', { enumerable: false, value: sql, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    @dba.create_stdlib()\n    # prefix  = @cfg.prefix\n    # debug '^324367^', @dba._stdlib_cfg?.prefix\n    # unless ( stdlib_prefix = @dba._stdlib_cfg?.prefix )?\n    #   @dba.create_stdlib { prefix: 'std', }\n    #   debug '^324367^', @dba._stdlib_cfg?.prefix\n    #   # @cfg = guy.lft.lets @cfg, ( d ) -> d.stdlib_prefix = stdlib_prefix\n    # #.......................................................................................................\n    # # @dba.create_function name: prefix + 'advance',  call: ( vnr )   => jr @advance     jp vnr\n    return null\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  # alter_table: ( cfg ) ->\n  #   validate.dhlr_alter_table_cfg cfg = { types.defaults.dhlr_alter_table_cfg..., cfg..., }\n  #   { schema\n  #     table_name\n  #     json_column_name\n  #     blob_column_name }  = cfg\n  #   prefix                = @cfg.prefix\n  #   return null\n\n############################################################################################################\nif module is require.main then do =>\n  # debug '^2378^', require 'datom'\n\n\n\n\n\n\n\n\n"
  ]
}